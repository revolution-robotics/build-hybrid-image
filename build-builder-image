#!/usr/bin/env bash
#
# @(#) build-builder-image
#
# Copyright Â© 2021-2023 Revolution Robotics, Inc.
#
: ${AWK_CMD:='/usr/bin/gawk'}
: ${BUILDAH_CMD:='/usr/bin/buildah'}
: ${CAT_CMD:='/bin/cat'}
: ${CHMOD_CMD:='/bin/chmod'}
: ${CHROOT_CMD:='/usr/sbin/chroot'}
: ${CP_CMD:='/bin/cp'}
: ${FINDMNT_CMD:='/bin/findmnt'}
: ${GIT_CMD:='/usr/bin/git'}
: ${GREP_CMD:='/usr/bin/grep'}
: ${HEAD_CMD:='/usr/bin/head'}
: ${INSTALL_CMD:='/usr/bin/install'}
: ${IP_CMD:='/sbin/ip'}
: ${MOUNT_CMD:='/bin/mount'}
: ${NMCLI_CMD:='/usr/bin/nmcli'}
: ${PODMAN_CMD:='/usr/bin/podman'}
: ${READLINK_CMD:='/bin/readlink'}
: ${RM_CMD:='/bin/rm'}
: ${SED_CMD:='/bin/sed'}
: ${SLEEP_CMD:='/bin/sleep'}
: ${SOPS_CMD:="${HOME}/.asdf/shims/sops"}
: ${SUDO_CMD:='/usr/bin/sudo'}
: ${SYSTEMCTL_CMD:='/bin/systemctl'}
: ${TAR_CMD:='/bin/tar'}
: ${TEE_CMD:='/usr/bin/tee'}
: ${TOUCH_CMD:='/bin/touch'}
: ${UMOUNT_CMD:='/bin/umount'}
: ${ZFS_CMD:='/sbin/zfs'}

pr-info ()
{
    printf "I: %s\n" "$@" >&2
}

pr-err ()
{
    printf "I: %s\n" "$@" >&2
}

# OS-agnstoic readlink for existent files/directories.
resolve-existing ()
{
    if $READLINK_CMD --version 2>&1 | $GREP_CMD -q 'coreutils'; then
        $READLINK_CMD -e -- "$@"
    else
        $READLINK_CMD -f N "$@"
    fi
}

load-configuration ()
{
    local config_file=$1
    local line

    while read line; do

        # If line neither empty nor a comment...
        if [[ ! ."$line" =~ ^\.[[:space:]]*$ \
                  && ! ."$line" =~ ^\.[[:space:]]*# ]]; then

            # Split line on equals sign (=)...
            set --; set -- $($AWK_CMD -F'=' '{ print $1, $2 }' <<<"$line")

            # If first arg is legal bash variable name...
            if [[ ."$1" =~ ^\.[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then

                # If right side contains quotes...
                if [[ "${@:2}" =~ (\"|\') ]]; then
                    eval $1="${@:2}"
                else
                    eval $1=\""${@:2}"\"
                fi
            fi
        fi
    done <"$config_file"
}

enable-qemu-arm ()
{
    local qemu_arm=/proc/sys/fs/binfmt_misc/qemu-arm

    if ! $SUDO_CMD $SYSTEMCTL_CMD enable --now binfmt-support &>/dev/null; then
        pr-err "${script_name}: binfmt-support not available"
        return 1
    elif test ! -f "$qemu_arm" -o ."$($HEAD_CMD -1 $qemu_arm)" != .'enabled'; then
        pr-err "${script_name}: qemu-arm: QEMU ARM interpreter not available"
        return 2
    fi
}

get-external-ip ()
{
    local gateway_device=''
    local ipv4_address=''

    gateway_device=$(
        $IP_CMD route |
            $AWK_CMD '/^default/ { print gensub(/^.* dev ([^ ]+) .*$/, "\\1", 1) }'
                  ) || return $?
    ipv4_address=$(
        $NMCLI_CMD -t --fields ip4.address d show "$gateway_device" |
            $AWK_CMD '{ print gensub(/.*:([^/]+)\/.*/, "\\1", 1) }'
                ) || return $?

    echo "$ipv4_address"
}

get-secret ()
{
    local key=$1

    local toplevel_dir=''

    toplevel_dir=$($GIT_CMD -C "$script_dir" rev-parse --show-toplevel) || return $?

    if test -f "${toplevel_dir}/config/secrets.enc.json"; then
        $SOPS_CMD exec-env "${toplevel_dir}/config/secrets.enc.json" "echo \$$key"
    fi
}

umount-fs ()
{
    local mount_point=$1
    local fs=''

    for fs in dev/pts dev proc sys ; do
        if $FINDMNT_CMD "${mount_point}/${fs}" >/dev/null; then
            $SUDO_CMD $UMOUNT_CMD -f "${mount_point}/${fs}" 2>/dev/null
        fi
    done
}

mount-fs ()
{
    local mount_point=$1

    $SUDO_CMD $INSTALL_CMD -d -m 0755 -o root -g root "${mount_point}" || return $?
    $SUDO_CMD $INSTALL_CMD -d -m 0555 -o root -g root "${mount_point}"/{dev,proc,sys} || return $?
    $SUDO_CMD $INSTALL_CMD -d -m 0755 -o root -g root "${mount_point}/dev/pts" || return $?

    if ! $FINDMNT_CMD "${mount_point}/proc" >/dev/null; then
        $SUDO_CMD $MOUNT_CMD -t proc /proc "${mount_point}/proc" || return $?
    fi

    for fs in /sys /dev /dev/pts; do
        if ! $FINDMNT_CMD "${mount_point}${fs}" >/dev/null; then
            $SUDO_CMD $MOUNT_CMD -o bind "$fs" "${mount_point}${fs}" || return $?
        fi
    done
}

build-builder ()
{
    local name=$1
    local image=$2
    local tag=$3
    local build_script=$4
    local client=$5

    # local old_image_id=$($SUDO_CMD $BUILDAH_CMD images -n --filter=reference="localhost/${name}" --format="{{.ID}}")

    # if test ."$old_image_id" != .''; then
    #     pr-info "Removing old container image: localhost/${name}"
    #     $SUDO_CMD $BUILDAH_CMD rmi "$old_image_id" >&2 || return $?
    # fi

    local image_id=''

    image_id=$(
        $SUDO_CMD $BUILDAH_CMD images -n --filter=reference="localhost/${name}" \
                  --format="{{.ID}}"
            ) || return $?

    if test ."$image_id" != .''; then
        echo "$image_id"
        return 0
    fi

    pr-info "Pulling container image: ${image}:${tag}"

    local container=''
    local mount_point=''

    container=$($SUDO_CMD $BUILDAH_CMD from "${image}:${tag}") || return $?
    mount_point=$($SUDO_CMD $BUILDAH_CMD mount "$container") || return $?

    if test -f "${mount_point}/etc/hosts"; then
        $SUDO_CMD $CP_CMD -a "${mount_point}/etc/hosts"{,~} || return $?
    else
        $SUDO_CMD $TOUCH_CMD  "${mount_point}/etc/hosts~" || return $?
    fi

    if test -f "${mount_point}/etc/resolv.conf"; then
        $SUDO_CMD $CP_CMD -a "${mount_point}/etc/resolv.conf"{,~} || return $?
    else
        $SUDO_CMD $TOUCH_CMD  "${mount_point}/etc/resolv.conf~" || return $?
    fi

    $SUDO_CMD $INSTALL_CMD -m 0644 /etc/hosts "${mount_point}/etc" || return $?
    $SUDO_CMD $INSTALL_CMD -m 0644 /etc/resolv.conf "${mount_point}/etc" || return $?

    $SUDO_CMD $TEE_CMD "${mount_point}/install-prerequisites" >/dev/null <<EOF
#!/bin/bash
#
# @(#) install-prerequisites
#
: \${HOST_GW_IPV4:=$(get-external-ip)}
EOF

    $SUDO_CMD $TEE_CMD -a "${mount_point}/install-prerequisites" >/dev/null <<'EOS'
: ${APT_CMD:='/usr/bin/apt'}
: ${BASH_CMD:='/bin/bash'}
: ${CAT_CMD:='/bin/cat'}
: ${CHMOD_CMD:='/bin/chmod'}
: ${CURL_CMD:='/usr/bin/curl'}
: ${GPG_CMD:='/usr/bin/gpg'}
: ${RM_CMD:='/bin/rm'}
: ${USERADD_CMD:='/usr/sbin/useradd'}
: ${UNAME_CMD:='/bin/uname'}

install-packages ()
{
    local policy=/usr/sbin/policy-rc.d
    local proxy=/etc/apt/apt.conf.d/10acng-proxy

    trap '$RM_CMD -f "$policy"' 0 1 2 15 RETURN

    $CAT_CMD >"$policy" <<EOF
#!/bin/sh
exit 101
EOF
    $CHMOD_CMD 0755 "$policy"

    $APT_CMD update
    DEBIAN_FRONTEND=noninteractive $APT_CMD -qy install curl gawk iproute2
    $APT_CMD -qy remove --purge mawk

    if test ."$HOST_GW_IPV4" != .'' &&
            $CURL_CMD "${HOST_GW_IPV4}:3142" &>/dev/null; then
        $CAT_CMD >"$proxy" <<EOF
Acquire::http::Proxy "http://${HOST_GW_IPV4}:3142";
EOF
    fi

    DEBIAN_FRONTEND=noninteractive $APT_CMD -qy install autoconf automake     \
        autopoint bc binfmt-support binutils bison build-essential            \
        cmake coreutils debootstrap device-tree-compiler devscripts           \
        dpkg-dev ed fakeroot flex g++ gcc gettext git gpg groff               \
        gzip help2man kmod libncurses-dev libssl-dev libtool                  \
        libzmq3-dev libzmq5 lzop m4 make nlohmann-json3-dev parted            \
        patch perl python python3-dbus python-setuptools qemu                 \
        qemu-user-static rsync sudo u-boot-tools unzip upx-ucl vim            \
        xz-utils zip

    $APT_CMD -qy install binutils-arm-linux-gnueabihf
    $APT_CMD -qy install cpp-arm-linux-gnueabihf
    $APT_CMD -qy install gcc-arm-linux-gnueabihf
    $APT_CMD -qy install g++-arm-linux-gnueabihf

    $CURL_CMD -sLo /usr/bin/install-smallstep \
         "https://raw.githubusercontent.com/revolution-robotics/roadrunner-debian/debian_bullseye_rr01/revo/resources/smallstep/install-smallstep"
    $CURL_CMD -sLo /usr/bin/bootstrap-smallstep \
         "https://raw.githubusercontent.com/revolution-robotics/roadrunner-debian/debian_bullseye_rr01/revo/resources/smallstep/bootstrap-smallstep"
    $CHMOD_CMD +x /usr/bin/install-smallstep
    $CHMOD_CMD +x /usr/bin/bootstrap-smallstep
    echo "Installing smallstep..." >&2
    $USERADD_CMD -m -s $BASH_CMD -c 'REVO Admin' revo
    printf 'revo\tALL=(ALL) NOPASSWD: ALL\n' >/etc/sudoers.d/revo
    $CHMOD_CMD 0660 /etc/sudoers.d/revo

    case $($UNAME_CMD -m) in
        armv7l|aarch64|arm64) bootstrap-smallstep ;;
        amd64|x86_64) $SUDO_CMD install-smallstep ;;
    esac

    $CURL_CMD -sL https://ftp-master.debian.org/keys/release-11.asc |
        $GPG_CMD --import --no-default-keyring \
             --keyring /usr/share/keyrings/debian-bullseye-release.gpg
    $RM_CMD -f "$policy" "$proxy"

    trap - 0 1 2 15 RETURN
}

install-packages
EOS

    $SUDO_CMD $CHMOD_CMD 0755 "$mount_point/install-prerequisites" || return $?

    trap 'umount-fs "$mount_point"; exit' 0 1 2 15

    mount-fs "$mount_point" || return $?

    pr-info "Installing builder prerequisites..."

    $SUDO_CMD $CHROOT_CMD "$mount_point" ./install-prerequisites >&2 || return $?
    $SUDO_CMD $RM_CMD -f "${mount_point}/install-prerequisites" || return $?

    umount-fs "$mount_point" || return $?

    trap - 0 1 2 15

    printf -v quoted_x509_genkey '%q' "$(get-secret X509_GENKEY_${client})"
    printf -v quoted_signing_key '%q' "$(get-secret SIGNING_KEY_${client})"

    $SED_CMD -e "s;@GW_IPV4@;$(get-external-ip);"  \
         -e "s;@CA_URL@;$(get-secret CA_URL);" \
         -e "s;@CA_FINGERPRINT@;$(get-secret CA_FINGERPRINT);" \
         -e "s;@X509_GENKEY@;${quoted_x509_genkey};" \
         -e "s;@SIGNING_KEY@;${quoted_signing_key};" \
         "$build_script" |
        $SUDO_CMD tee "${mount_point}/root/${build_script##*/}" >/dev/null || return $?
    $SUDO_CMD $CHMOD_CMD 0755 "${mount_point}/root/${build_script}" || return $?
    $SUDO_CMD $BUILDAH_CMD unmount "$container" >&2 || return $?
    $SUDO_CMD $BUILDAH_CMD config --cmd "/root/${build_script}" \
          --label name="$name" "$container" >&2 || return $?
    $SUDO_CMD $BUILDAH_CMD commit "$container" "$name" >&2 || return $?
    $SUDO_CMD sync || return $?
    $SLEEP_CMD 5 || return $?
    $SUDO_CMD $BUILDAH_CMD rm "$container" >&2 || return $?
    $SUDO_CMD $BUILDAH_CMD images -n --filter=reference="localhost/${name}" \
          --format="{{.ID}}" || return $?
}

reset-window-title ()
{
    printf "\e]0;$USER@${HOSTNAME%%.*}\a"
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare script=''
    declare script_dir=''
    declare script_name=''

    script=$(resolve-existing "$0")
    script_name=${script##*/}
    script_dir=${script%/*}

    declare client=${1:-'UD'}
    declare machine=${2:-'revo-roadrunner-mx7'}
    declare distribution=${3:-'debian'}

    source /etc/os-release

    case "$ID" in
        debian|ubuntu) enable-qemu-arm || exit $? ;;
    esac

    load-configuration "${script_dir}/build-hybrid-image.conf" || exit $?

    declare builder_id=''

    builder_id=$(
        build-builder "$builder_name" "$builder_image" "$builder_tag" \
                      "$build_script" "$client"
              ) || exit $?

    if test ."$builder_id" = .''; then
        pr-err "${script_name}: Cannot build builder image"
        exit 2
    fi

    $CAT_CMD >&2 <<EOF
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
Builder image: ${builder_name}
Builder ID: ${builder_id}
Builder image: ${builder_name}
Derived from: ${builder_image}:${builder_tag}
Destination: ${build_products_dir}
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
EOF

    reset-window-title
fi
